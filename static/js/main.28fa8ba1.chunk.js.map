{"version":3,"sources":["../../dist/index.es.js","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["initialBounds","left","top","width","height","index_es_use3dEffect","ref","_a","Object","web","xys","config","mass","tension","friction","props","set","_b","window","console","warn","react","bounds","ro","entry","target","getBoundingClientRect","current","observe","disconnect","useBoundingClientRect","calc","x","y","style","transform","interpolate","s","onMouseLeave","onMouseMove","pageX","pageY","App","React","useRef","_use3dEffect","use3dEffect","mouseHandlers","objectWithoutProperties","react_default","a","createElement","className","src","logo","alt","div","assign","objectSpread","background","padding","borderRadius","color","default_highlight","language","customStyle","margin","display","href","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.28fa8ba1.chunk.js","sourcesContent":["import { useSpring } from 'react-spring';\nimport { useState, useEffect } from 'react';\nvar initialBounds = {\n  left: 0,\n  top: 0,\n  width: 0,\n  height: 0\n};\n\nfunction useBoundingClientRect(ref) {\n  if (!window[\"ResizeObserver\"]) {\n    console.warn(\"use-3d-effect requires a ResizeObserver polyfill\");\n    return initialBounds;\n  }\n\n  var _a = useState(initialBounds),\n      bounds = _a[0],\n      set = _a[1];\n\n  var ro = useState(function () {\n    return new window[\"ResizeObserver\"](function (_a) {\n      var entry = _a[0];\n      return set(entry.target.getBoundingClientRect());\n    });\n  })[0];\n  useEffect(function () {\n    if (ref.current) ro.observe(ref.current);\n    return function () {\n      return ro.disconnect();\n    };\n  }, []);\n  return bounds;\n}\n\nvar use3dEffect = function use3dEffect(ref) {\n  var _a = useSpring(function () {\n    return {\n      xys: [0, 0, 1],\n      config: {\n        mass: 5,\n        tension: 350,\n        friction: 40\n      }\n    };\n  }),\n      props = _a[0],\n      set = _a[1];\n\n  var _b = useBoundingClientRect(ref),\n      top = _b.top,\n      left = _b.left,\n      width = _b.width,\n      height = _b.height;\n\n  var calc = function calc(x, y) {\n    return [-((top + height / 2 - y) / (height / 2)) * 10, -((left + width / 2 - x) / (width / 2)) * 10, 1.1];\n  };\n\n  var trans = function trans(x, y, s) {\n    return \"perspective(1000px) rotateX(\" + x + \"deg) rotateY(\" + -y + \"deg) scale(\" + s + \")\";\n  };\n\n  return {\n    style: {\n      // @ts-ignore\n      transform: props.xys.interpolate(trans)\n    },\n    onMouseLeave: function onMouseLeave() {\n      return set({\n        xys: [0, 0, 1]\n      });\n    },\n    // @ts-ignore\n    onMouseMove: function onMouseMove(_a) {\n      var x = _a.pageX,\n          y = _a.pageY;\n      return set({\n        xys: calc(x, y)\n      });\n    }\n  };\n};\n\nexport { use3dEffect };","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"resize-observer-polyfill\";\nimport { animated } from \"react-spring\";\nimport { use3dEffect } from \"use-3d-effect\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\nconst example = `\nimport 'resize-observer-polyfill';\nimport { animated } from 'react-spring';\nimport { use3dEffect } from 'use-3d-effect';\n\nconst Example = () => {\n  const ref = React.useRef(null);\n  const {style, ...mouseHandlers} = use3dEffect(ref);\n\n  return (\n    <animated.div\n      ref={ref}\n      style={{\n        background: '#61dafb', color: 'white', padding: '2em',\n        ...style\n      }}\n      {...mouseHandlers}\n    >\n      Hover over me!\n    </animated.div>\n};\n`;\nconst App: React.FunctionComponent<{}> = (): JSX.Element => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { style, ...mouseHandlers } = use3dEffect(ref);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> use-3d-effect\n        </h1>\n        <p>React hook for the 3D tilt card effect.</p>\n        <animated.div\n          ref={ref}\n          style={{\n            background: \"#61dafb\",\n            padding: \"2em\",\n            borderRadius: \"0.25em\",\n            ...style\n          }}\n          {...mouseHandlers}\n        >\n          Hover over me!\n        </animated.div>\n      </header>\n      <div className=\"App-body\">\n        <code className=\"App-code\">\n          yarn add use-3d-effect{\" \"}\n          <span style={{ color: \"gray\" }}>\n            react-spring resize-observer-polyfill\n          </span>\n        </code>\n        <SyntaxHighlighter\n          language=\"javascript\"\n          customStyle={{\n            margin: \"1em auto\",\n            padding: \"0 1em\",\n            display: \"block\"\n          }}\n        >\n          {example}\n        </SyntaxHighlighter>\n\n        <footer className=\"App-footer\">\n          <a\n            className=\"App-link\"\n            href=\"https://npmjs.org/package/use-3d-effect\"\n          >\n            npm\n          </a>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/hermanya/use-3d-effect\"\n          >\n            github\n          </a>\n          <a className=\"App-link\" href=\"https://hermanya.github.io\">\n            made by Herman Starikov\n          </a>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}