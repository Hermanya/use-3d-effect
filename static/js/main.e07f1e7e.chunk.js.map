{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","logo.svg","../../dist/index.es.js"],"names":["App","ref","React","useRef","_use3dEffect","use3dEffect","style","mouseHandlers","Object","objectWithoutProperties","react_default","a","createElement","className","src","logo","alt","web","div","assign","objectSpread","background","padding","borderRadius","href","color","default_highlight","language","customStyle","margin","display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p","global","d","__webpack_exports__","react_spring__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","this","__entries__","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","contentRect","Constr","DOMRectReadOnly","create","createReadOnlyRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","initialBounds","xys","config","mass","tension","friction","bounds","ro","getBoundingClientRect","current","useBoundingClientRect","calc","transform","interpolate","s","onMouseLeave","onMouseMove","pageX","pageY"],"mappings":"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","file":"static/js/main.e07f1e7e.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { animated } from \"react-spring\";\nimport { use3dEffect } from \"use-3d-effect\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\n\nconst example = `\nimport { animated } from 'react-spring';\nimport { use3dEffect } from 'use-3d-effect';\n\nconst Example = () => {\n  const ref = React.useRef(null);\n  const {style, ...mouseHandlers} = use3dEffect(ref);\n\n  return (\n    <animated.div\n      ref={ref}\n      style={{\n        background: '#61dafb', color: 'white', padding: '2em',\n        ...style\n      }}\n      {...mouseHandlers}\n    >\n      Hover over me!\n    </animated.div>\n  );\n};\n`;\nconst App: React.FunctionComponent<{}> = (): JSX.Element => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { style, ...mouseHandlers } = use3dEffect(ref);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> use-3d-effect\n        </h1>\n        <p>React hook for the 3D tilt card effect.</p>\n        <animated.div\n          ref={ref}\n          style={{\n            background: \"#61dafb\",\n            padding: \"2em\",\n            borderRadius: \"0.25em\",\n            ...style\n          }}\n          {...mouseHandlers}\n        >\n          Hover over me!\n        </animated.div>\n        <footer className=\"App-footer\">\n          <a\n            className=\"App-link\"\n            href=\"https://npmjs.org/package/use-3d-effect\"\n          >\n            npm\n          </a>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/hermanya/use-3d-effect\"\n          >\n            github\n          </a>\n          <a className=\"App-link\" href=\"https://hermanya.github.io\">\n            made by Herman Starikov\n          </a>\n        </footer>\n      </header>\n      <div className=\"App-body\">\n        <code className=\"App-code\">\n          yarn add use-3d-effect{\" \"}\n          <span style={{ color: \"gray\" }}>react-spring</span>\n        </code>\n        <SyntaxHighlighter\n          language=\"javascript\"\n          customStyle={{\n            margin: \"1em auto\",\n            padding: \"0 1em\",\n            display: \"block\"\n          }}\n        >\n          {example}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useSpring } from 'react-spring';\nimport { useState, useEffect } from 'react';\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\n\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\nvar initialBounds = {\n  left: 0,\n  top: 0,\n  width: 0,\n  height: 0\n};\n\nfunction useBoundingClientRect(ref) {\n  var _a = useState(initialBounds),\n      bounds = _a[0],\n      set = _a[1];\n\n  var ro = useState(function () {\n    return new index(function (_a) {\n      var entry = _a[0];\n      return set(entry.target.getBoundingClientRect());\n    });\n  })[0];\n  useEffect(function () {\n    if (ref.current) ro.observe(ref.current);\n    return function () {\n      return ro.disconnect();\n    };\n  }, []);\n  return bounds;\n}\n\nvar use3dEffect = function use3dEffect(ref) {\n  var _a = useSpring(function () {\n    return {\n      xys: [0, 0, 1],\n      config: {\n        mass: 5,\n        tension: 350,\n        friction: 40\n      }\n    };\n  }),\n      props = _a[0],\n      set = _a[1];\n\n  var _b = useBoundingClientRect(ref),\n      top = _b.top,\n      left = _b.left,\n      width = _b.width,\n      height = _b.height;\n\n  var calc = function calc(x, y) {\n    return [-((top + height / 2 - y) / (height / 2)) * 10, -((left + width / 2 - x) / (width / 2)) * 10, 1.1];\n  };\n\n  var trans = function trans(x, y, s) {\n    return \"perspective(1000px) rotateX(\" + x + \"deg) rotateY(\" + -y + \"deg) scale(\" + s + \")\";\n  };\n\n  return {\n    style: {\n      // @ts-ignore\n      transform: props.xys.interpolate(trans)\n    },\n    onMouseLeave: function onMouseLeave() {\n      return set({\n        xys: [0, 0, 1]\n      });\n    },\n    // @ts-ignore\n    onMouseMove: function onMouseMove(_a) {\n      var x = _a.pageX,\n          y = _a.pageY;\n      return set({\n        xys: calc(x, y)\n      });\n    }\n  };\n};\n\nexport { use3dEffect };"],"sourceRoot":""}